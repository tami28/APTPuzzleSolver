A little explanation about the classes:

* Exception: Contains enum of ErrorTypes (i.e. missing pieces, missing corners etc), a class representing a single Error with needed info,
                and a Singleton class representing a list of Errors.
* PuzzlePiece: Pretty much what you think. id, constraints on the edges etc.
* Puzzle: Represents a puzzle, includes pieces, checks for different legality issues etc..
* PuzzleMatrix: Represents a possible solution for the puzzle for a specific width & hight. Holds constraints according to the pieces assigned already.
* Solver: In charge of solving the puzzle. Will be called only of no previous errors from building the puzzle. Checks it can be solves (no missing
            corners etc..) and if so tries to solve for different possible sizes.

--- The solving algorithm:---
We try to solve per  legal size (determined by number of straight edges on each side):
Go by rows and try to fit puzzle pieces that fit the constraint in cell i,j. The constraints are set by previous pieces already places (left & up) or
if we are on the edge. Then it is _solved recursively.
We hold a set of piece shapes already tried, so if we encounter another piece index with the same shape it will not be checked.



